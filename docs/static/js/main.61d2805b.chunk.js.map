{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.jsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAiCeA,EA9BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACpB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC3CN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBoB,SAACP,GACzBF,EAAeE,EAAEQ,OAAOF,a,+BCPfG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAClC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,EAAL,WCDOO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAEvB,ECJ0B,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDZsBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACE,qCACE,6BAAKpB,IAEJoB,GAAW,2CAEZ,qBAAKJ,UAAU,YAAf,SACGH,EAAOJ,KAAK,SAAAC,GAAG,OACd,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEUjBgB,EAvBM,WAEnB,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAMA,OACE,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACGS,EAAWe,KAAI,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCdtB4B,IAASC,OAEL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.61d2805b.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue( e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(inputValue.trim().length > 2){\r\n      setCategories(categories => [inputValue,...categories]);\r\n      setInputValue('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        />\r\n    </form>\r\n  );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","export const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=cD9LnnnK47sSOoa0AzcfvPdnE9WonUix`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p> {title} </p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n  const {data:images, loading} = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n\r\n      {loading && <p>Loading...</p>}\r\n\r\n      <div className=\"card-grid\">\r\n        {images.map( img => (\r\n          <GifGridItem key={img.id} {...img} />\r\n          ))}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false,\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n    return state;\r\n}","import React, {useState} from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['Dragon Ball'])\r\n  \r\n  // const handleAdd = () => {\r\n  //   setCategories( [...categories, 'Death Note']);\r\n  // }\r\n\r\n  return (\r\n    <>\r\n    <h2>GifExpertApp</h2>\r\n    <AddCategory setCategories={setCategories} />\r\n    <hr />\r\n    \r\n    <ol>\r\n      {categories.map(category => (\r\n        <GifGrid key={category} category={category} />\r\n      ))}\r\n    </ol>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp.jsx'\n\n\nReactDOM.render(\n\n    <GifExpertApp / > ,\n    document.getElementById('root')\n);"],"sourceRoot":""}